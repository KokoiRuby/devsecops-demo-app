pipeline {
    agent none
    stages {
        stage('Parallel build') {
            parallel {
                stage('Scan and build foo') {
                    stages {
                        stage('Scan foo with Sonarqube') {
                            when {
                                changeset "**/foo/**"
                            }
                            agent {
                                kubernetes {
                                    defaultContainer 'sonar-scanner'
                                    yaml """
kind: Pod
spec:
  containers:
    - name: sonar-scanner
      image: sonarsource/sonar-scanner-cli:11.1
      imagePullPolicy: Always
      command:
        - sleep
      args:
        - 99d
"""
                                }
                            }

                            environment {
                                HARBOR_URL     = credentials('harbor-url')
                                SONAR_TOKEN     = credentials('sonar-token')
                                SONAR_SCANNER_OPTS = "-Dsonar.projectKey=devsecops-demo-app-foo -Dsonar.token=${SONAR_TOKEN}"
                                SONAR_HOST_URL = "http://sonar${HARBOR_URL.replaceAll('harbor','')}."
                            }

                            steps {
                                container(name: 'sonar-scanner', shell: '/bin/sh') {
                                    withSonarQubeEnv('SonarQube') {
                                        sh '''#!/bin/sh
                                            cd foo
                                            sonar-scanner
                                        '''
                                    }
                                    timeout(time: 1, unit: 'HOURS') {
                                        waitForQualityGate abortPipeline: true
                                    }
                                }
                            }
                        }
                    

                        stage('Build foo') {
                            when {
                                anyOf{
                                    changeset "**/foo/*.*"
                                    expression{env.BUILD_NUMBER == '1'}
                                    expression {
                                        return env.CHANGE_ID != null
                                    }
                                }
                            }
                            agent {
                                kubernetes {
                                    defaultContainer 'kaniko'
                                    //workspaceVolume persistentVolumeClaimWorkspaceVolume(claimName: "jenkins-workspace-pvc", readOnly: false)
                                    yaml """
kind: Pod
spec:
  containers:
    - name: kaniko
      image: gcr.io/kaniko-project/executor:v1.23.2-debug
      imagePullPolicy: Always
      command:
        - sleep
      args:
        - 99d
      volumeMounts:
        - name: jenkins-docker-cfg
          mountPath: /kaniko/.docker
  volumes:
  - name: jenkins-docker-cfg
    projected:
      sources:
      - secret:
          name: harbor-pullsecret
          items:
            - key: .dockerconfigjson
              path: config.json
                """
                                }
                            }

                            environment {
                                HARBOR_URL     = credentials('harbor-url')
                                IMAGE_PUSH_DESTINATION="${HARBOR_URL}/devsecops-demo-app/foo"
                                GIT_COMMIT="${checkout (scm).GIT_COMMIT}"
                                IMAGE_TAG = "${BRANCH_NAME}-${GIT_COMMIT}"
                                BUILD_IMAGE="${IMAGE_PUSH_DESTINATION}:${IMAGE_TAG}"
                                BUILD_COMMIT_IMAGE="${IMAGE_PUSH_DESTINATION}:${GIT_COMMIT}"
                                BUILD_IMAGE_LATEST="${IMAGE_PUSH_DESTINATION}:latest"
                            }

                            steps {
                                container(name: 'kaniko', shell: '/busybox/sh') {
                                    withEnv(['PATH+EXTRA=/busybox']) {
                                        sh '''#!/busybox/sh
                                            cd foo
                                            /kaniko/executor --context `pwd` --destination $BUILD_COMMIT_IMAGE --destination $BUILD_IMAGE --destination $IMAGE_PUSH_DESTINATION --insecure
                                        '''
                                    }
                                }
                            }
                        }
                    }
                }

                stage('Scan and build bar') {
                    stages {
                        stage('Scan bar with Sonarqube') {
                            when {
                                changeset "**/bar/**"
                            }
                            agent {
                                kubernetes {
                                    defaultContainer 'sonar-scanner'
                                    yaml """
kind: Pod
spec:
  containers:
    - name: sonar-scanner
      image: sonarsource/sonar-scanner-cli:11.1
      imagePullPolicy: Always
      command:
        - sleep
      args:
        - 99d
                """
                                }
                            }

                            environment {
                                HARBOR_URL     = credentials('harbor-url')
                                SONAR_TOKEN     = credentials('sonar-token')
                                SONAR_SCANNER_OPTS = "-Dsonar.projectKey=devsecops-demo-app-bar -Dsonar.token=${SONAR_TOKEN}"
                                SONAR_HOST_URL = "http://sonar${HARBOR_URL.replaceAll('harbor','')}."
                            }

                            steps {
                                container(name: 'sonar-scanner', shell: '/bin/sh') {
                                    withSonarQubeEnv('SonarQube') {
                                        sh '''#!/bin/sh
                                            cd bar
                                            sonar-scanner
                                        '''
                                    }
                                    timeout(time: 1, unit: 'HOURS') {
                                        waitForQualityGate abortPipeline: true
                                    }
                                }
                            }
                        }

                        stage('Build bar') {
                            when {
                                anyOf{
                                    changeset "**/bar/*.*"
                                    expression{env.BUILD_NUMBER == '1'}
                                    expression {
                                        return env.CHANGE_ID != null
                                    }
                                }
                            }
                            agent {
                                kubernetes {
                                    defaultContainer 'kaniko'
                                    //workspaceVolume persistentVolumeClaimWorkspaceVolume(claimName: "jenkins-workspace-pvc", readOnly: false)
                                    yaml """
kind: Pod
spec:
  containers:
    - name: kaniko
      image: gcr.io/kaniko-project/executor:v1.23.2-debug
      imagePullPolicy: Always
      command:
        - sleep
      args:
        - 99d
      volumeMounts:
        - name: jenkins-docker-cfg
          mountPath: /kaniko/.docker
  volumes:
  - name: jenkins-docker-cfg
    projected:
      sources:
      - secret:
          name: harbor-pullsecret
          items:
            - key: .dockerconfigjson
              path: config.json
                """
                                }
                            }

                            environment {
                                HARBOR_URL     = credentials('harbor-url')
                                IMAGE_PUSH_DESTINATION="${HARBOR_URL}/devsecops-demo-app/bar"
                                GIT_COMMIT="${checkout (scm).GIT_COMMIT}"
                                IMAGE_TAG = "${BRANCH_NAME}-${GIT_COMMIT}"
                                BUILD_IMAGE="${IMAGE_PUSH_DESTINATION}:${IMAGE_TAG}"
                                BUILD_COMMIT_IMAGE="${IMAGE_PUSH_DESTINATION}:${GIT_COMMIT}"
                                BUILD_IMAGE_LATEST="${IMAGE_PUSH_DESTINATION}:latest"
                            }

                            steps {
                                container(name: 'kaniko', shell: '/busybox/sh') {
                                    withEnv(['PATH+EXTRA=/busybox']) {
                                        sh '''#!/busybox/sh
                                            cd bar
                                            /kaniko/executor --context `pwd` --destination $BUILD_COMMIT_IMAGE --destination $BUILD_IMAGE --destination $IMAGE_PUSH_DESTINATION --insecure
                                        '''
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
